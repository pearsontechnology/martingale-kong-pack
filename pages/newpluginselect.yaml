description: Provides the ability to select a plugin and an optional API to bind it to for configuration.
$type: DataEditPage
props:
  title: New Plugin
  mapper:
    $mapper: |
      (()=>{
        const {
          plugins,
          apis
        } = props;
        if(Array.isArray(plugins) && Array.isArray(apis)){
          return Object.assign({}, props, {
            schema: {
              fields: {
                api: {
                  type: 'string',
                  enum: ['[global]', ...apis.map(api=>api.name)],
                  default: '[global]'
                },
                pluginType: {
                  type: 'string',
                  enum: plugins,
                  required: true
                }
              }
            }
          });
        }
        return props;
      })();
  source:
    apis:
      url:
        $map: |
          `${config.host || "/api/kong"}/apis`
      root: data
    plugins:
      url:
        $map: |
          `${config.host || "/api/kong"}/plugins/enabled`
      root: enabled_plugins
  Editor:
    $component: KongForm
  successUrl:
    $mapper: |
      (()=>{
        const rootPath = config.env?`/kong/${config.env}`:'/kong';
        if(props.api!=='[global]'){
          return `${rootPath}/api/${props.api}/plugin/${props.pluginType}`;
        }
        return `${rootPath}/plugin/${props.pluginType}`
      })();
paths:
  - /kong/plugin
  - /kong/:env/plugin
